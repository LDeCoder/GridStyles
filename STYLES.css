/* /* We need to first look at the context of our page 
with a block level element. The block element will 
be our main container at 100% wide.
 */

 .grid {
    width: auto;
 }

 /* So the columns are side-by-side, we will need to add a float and widths to the CSS. Giving a global class selector to our col- will apply the floats. The percentage values will give our columns the proper width value for each column. */
 [class*='col-'] {
    float: left;
 }
 .col-1-3 {
    width: 33.33%;
 }
 .col-2-3 {
    width: 66.66%;
 }
/* The parent element: grid, will collapse to zero height since it's children are floated left. We can fix that by removing both the left and right values.

 */
 grid:after {
    content: "";
    display: table;
    clear: both;
 }
/* When adding gutters, our first step is to use a box-sizing property with border-box value. The box-sizing property is used to modify the default CSS box model to calculate the width and height of the components. In our example, we are using property values that address all browsers.

 */
 *, *:after, *:before {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
 }

 /* When a set width applies to an element, the padding and borders stay that width. The second step is to add fixed padding to the right side of all columns except the last one. It gives our two-column layout space between each, but none on the last element.

 */
 [class*='col-'] {
    padding-right: 20px;
 }
 [class*='col-']:last-of-type {
    padding-right: 0;
 }

 /* mMODULAR - */
 .module {
    padding:  20px;
    background: #eee;
 }


 /* COLUMNS - More Column Choices */
 .col-1-2 {
    width: 50%;
 }
 .col-1-4 {
    width: 25%;
 }
 .col-1-8 {
    width: 12.5%;
 }
 */
